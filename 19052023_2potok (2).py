# -*- coding: utf-8 -*-
"""19052023_2potok.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hx8ALE_Al16Hmoog1maCSgCb1KJUOCAe
"""

# Задача 4

import sqlite3
import pandas as pd

con = sqlite3.connect("Students.db")
df = pd.read_sql('SELECT * FROM Students',con)
print (df)
df.to_excel("task5.xlsx", index = False)

# Задача 5
import sqlite3
import pandas as pd

con = sqlite3.connect("Students.db")

newstud = pd.DataFrame({'Student_id': [205,206,207],
                        'Student_name': ['Сергей','Марина','Елена'],
                        'School_id': [1,2,3]})
newstud.to_sql('Students', con, index = False, if_exists = "append")

# Задача 5
import sqlite3
import pandas as pd

con = sqlite3.connect("Students.db")

newcar = pd.DataFrame({'Student_id': [205,206,207],
                       'Car': ['Жигули','Рено','Тойта']})
newcar.to_sql('Cars', con, index = False, if_exists = "append")

joindf = pd.read_sql('SELECT Students.Student_name,Cars.Car FROM Students JOIN Cars ON Students.Student_id = Cars.Student_id', con)
joindf.to_excel("task6.xlsx", index = False)

import sqlite3
import pandas as pd



def get_teacher_data(school_id):
  con = sqlite3.connect("teachers.db")
  query = f'SELECT * FROM Teatcher JOIN School ON Teatcher.School_Id = School.School_Id WHERE School.School_Id = {school_id}'
  teacher_data = pd.read_sql(query,con)
  con.close()
  print(teacher_data)
  teacher_data.columns = ('Teatcher_Id', 'Teatcher_Name',  'School_Id', 'Joining_Date','Speciality',  'ZP', 'Experience',  'School_Id2', 'School_Name', 'Place_Count')
  
  teacher_data = teacher_data.drop(['School_Id2','ZP', 'Experience'], axis = 1)
 
  print(teacher_data)

get_teacher_data(1)

import sqlite3
import pandas as pd

def get_teacher_data():
  con = sqlite3.connect("teachers.db")
  query = 'SELECT * FROM Teatcher'
  teacher_data = pd.read_sql(query,con)
  con.close()
 #print(teacher_data)
  return teacher_data

def get_school_data():
  con = sqlite3.connect("teachers.db")
  query = 'SELECT * FROM School'
  school_data = pd.read_sql(query,con)
  con.close()
  #print(school_data)
  return school_data

df1 = get_teacher_data()
df2 = get_school_data()

df3 = df1.merge(df2,left_on='School_Id',right_on='School_Id')
df3 = df3.replace('Физик','Математик')

print(df3)

def write_data(val):
  df4 = df3[df3['School_Id'] == val]
  df4.to_excel(f'Школа{val}.xlsx', index = False)


arr = [1,2,3,4]
for i in arr:
  write_data(i)

import sqlite3
import pandas as pd

def get_teacher_data():
  con = sqlite3.connect("teachers.db")
  query = 'SELECT * FROM Teatcher'
  teacher_data = pd.read_sql(query,con)
  con.close()
 #print(teacher_data)
  return teacher_data

df = get_teacher_data()
#df = df.head(100)
#print (df)
for index,row in df.iterrows():
  name = row['Teatcher_Name']
  print (name)

import sqlite3
import pandas as pd

con = sqlite3.connect("task6.db")

def task5():
  name = pd.read_excel('name.xlsx', sheet_name="Sheet1")
  id = pd.read_excel('id.xlsx', sheet_name="Sheet1")
  df = name.merge(id,left_on='rosstat_id',right_on='rosstat_id')
  #df = df.drop(['city_code'], axis = 1)
  dfname = name.head(5)
  #dfname = df.drop(['rosstat_weight','year'], axis = 1)

  print (dfname)
  for index,row in dfname.iterrows():
    id = row['rosstat_id']
    df2 = df[df['rosstat_id'] == id]
    #df2 = df2.drop(['rosstat_weight','year', 'city_code'], axis = 1)
    write_df(id,df2)

def write_df(id,df2):
  df3 = df2.drop(['rosstat_weight','year', 'city_code'], axis = 1)
  write = df3.to_sql(f'table{id}',con, index = False, if_exists='append')

task5()

import sqlite3
import pandas as pd

con = sqlite3.connect("task6.db")
df = pd.read_sql('SELECT * FROM table105',con)
print (df.columns)
#df.to_excel("task5.xlsx", index = False)

import numpy as np
import pandas as pd

x = np.matrix('1 2 3 4 5; 5 6 7 8 9; 11 12 13 14 15')
print (x)
y = x.tolist()
print(y)

#np.savetxt('test23.csv',x, delimiter=',',fmt='%s')

import numpy as np

x = np.identity(7)
print (x)

import numpy as np
x = np.array([1, 2, 3, 4])
print("Входящий массив:")
print(x)
print("Проверка на наличие элемента со значением 0")
print(np.all(x))
x = np.array([0,1, 2, 3])
print("Входящийм массив:")
print(x)
print("Проверка на наличие элемента со значением 0:")
print(np.all(x))

import numpy as np
a = np.array([[0,1],[2,3]])
print("Матрица:")
print(a)
print("Сумма всех элементов:")
print(np.sum(a))
print("Cумма элементов по столбцам:")
print(np.sum(a, axis=0))
print("Сумма элементов по строкам:")
print(np.sum(a, axis=1))

import numpy as np
import pandas as pd

x = np.diag([16, 5, 8, 10, 9, 1])
print(x)
y = pd.DataFrame(x)
y.to_excel('task091.xlsx', index = False)
x = np.diag()

import numpy as np
import pandas as pd

diagonal_values = [16, 5, 8, 10, 9, 1] 
matrix = np.zeros((6, 6)) 
np.fill_diagonal(np.fliplr(matrix), diagonal_values)
print (matrix)

import numpy as np
import pandas as pd
# Создание матрицы размером 7 на 7 с диапазоном значений от 50 до 100
matrix = np.random.randint(50, 101, size=(7, 7))

print(np.sum(matrix))
print(np.sum(matrix, axis = 0))
print(np.sum(matrix, axis = 1))
# Преобразование матрицы в объект DataFrame
df = pd.DataFrame(matrix)
# Запись DataFrame в файл CSV
df.to_csv('task2.csv', index=False)
#print("Матрица успешно записана в файл task2.csv.")